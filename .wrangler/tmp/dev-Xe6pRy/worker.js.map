{
  "version": 3,
  "sources": ["../bundle-GnjaUF/checked-fetch.js", "../../../src/worker.ts", "../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-GnjaUF/middleware-insertion-facade.js", "../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-GnjaUF/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/nasirann/Documents/GitHub/recipe-easy/.wrangler/tmp/dev-Xe6pRy",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "import { D1Database, R2Bucket } from '@cloudflare/workers-types';\n\nexport interface Env {\n  RECIPE_EASY_DB: D1Database;\n  RECIPE_IMAGES: R2Bucket;\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // \u8BBE\u7F6ECORS\u5934\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // \u5904\u7406\u9884\u68C0\u8BF7\u6C42\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    try {\n      // \u6839\u8DEF\u5F84\u54CD\u5E94\n      if (path === '/' || path === '') {\n        return new Response(JSON.stringify({\n          message: 'RecipeEasy API Service',\n          version: '1.0.0',\n          endpoints: {\n            categories: '/api/categories',\n            ingredients: '/api/ingredients',\n            cuisines: '/api/cuisines',\n            recipes: '/api/recipes',\n            images: '/images/'\n          },\n          documentation: 'This is the backend API service for RecipeEasy application'\n        }), {\n          status: 200,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // \u56FE\u7247\u670D\u52A1\u8DEF\u7531\n      if (path.startsWith('/images/')) {\n        return await handleImages(request, env.RECIPE_IMAGES, corsHeaders);\n      }\n\n      // API\u8DEF\u7531\u5904\u7406\n      if (path === '/api/categories') {\n        return await handleCategories(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n      \n      if (path === '/api/ingredients') {\n        return await handleIngredients(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n      \n      if (path === '/api/cuisines') {\n        return await handleCuisines(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n      \n      if (path === '/api/user-usage') {\n        return await handleUserUsage(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n      \n      if (path === '/api/recipes') {\n        return await handleRecipes(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n\n      if (path === '/api/admin/add-columns') {\n        return await handleAddColumns(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n\n      if (path === '/api/system-configs') {\n        return await handleSystemConfigs(request, env.RECIPE_EASY_DB, corsHeaders);\n      }\n\n      // \u9ED8\u8BA4\u54CD\u5E94\n      return new Response('API endpoint not found', { \n        status: 404,\n        headers: corsHeaders \n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(JSON.stringify({ \n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n  }\n};\n\n// \u5904\u7406\u56FE\u7247\u670D\u52A1\nasync function handleImages(request: Request, bucket: R2Bucket, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const url = new URL(request.url);\n    const imagePath = url.pathname.replace('/images/', '');\n    \n    if (!imagePath) {\n      return new Response('Image path is required', { \n        status: 400,\n        headers: corsHeaders \n      });\n    }\n\n    // \u4ECER2\u5B58\u50A8\u6876\u83B7\u53D6\u56FE\u7247\n    const object = await bucket.get(imagePath);\n    \n    if (!object) {\n      return new Response('Image not found', { \n        status: 404,\n        headers: corsHeaders \n      });\n    }\n\n    // \u6839\u636E\u6587\u4EF6\u6269\u5C55\u540D\u8BBE\u7F6E\u6B63\u786E\u7684Content-Type\n    const contentType = getContentType(imagePath);\n    \n    return new Response(object.body as any, {\n      headers: {\n        ...corsHeaders,\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=31536000', // \u7F13\u5B581\u5E74\n      },\n    });\n  } catch (error) {\n    console.error('Image serving error:', error);\n    return new Response('Failed to serve image', { \n      status: 500,\n      headers: corsHeaders \n    });\n  }\n}\n\n// \u83B7\u53D6\u6587\u4EF6Content-Type\nfunction getContentType(filename: string): string {\n  const ext = filename.split('.').pop()?.toLowerCase();\n  switch (ext) {\n    case 'png':\n      return 'image/png';\n    case 'jpg':\n    case 'jpeg':\n      return 'image/jpeg';\n    case 'gif':\n      return 'image/gif';\n    case 'webp':\n      return 'image/webp';\n    case 'svg':\n      return 'image/svg+xml';\n    default:\n      return 'application/octet-stream';\n  }\n}\n\n// \u5904\u7406\u5206\u7C7BAPI\nasync function handleCategories(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const language = searchParams.get('lang') || 'en';\n\n    const { results } = await db.prepare(`\n      SELECT \n        c.id,\n        c18n.name as category_name\n      FROM ingredient_categories c\n      LEFT JOIN ingredient_categories_i18n c18n ON c.id = c18n.category_id AND c18n.language_code = ?\n      ORDER BY c.id ASC\n    `).bind(language).all();\n\n    const categories = results || [];\n    const formattedCategories = categories.map((category: any) => {\n      // \u6839\u636E\u5206\u7C7BID\u6620\u5C04\u5230\u6B63\u786E\u7684slug\n      const slugMap: Record<number, string> = {\n        1: 'meat',\n        2: 'seafood', \n        3: 'vegetables',\n        4: 'fruits',\n        5: 'dairy-eggs',\n        6: 'grains-bread',\n        7: 'nuts-seeds',\n        8: 'herbs-spices',\n        9: 'oils-condiments'\n      };\n      \n      return {\n        id: category.id,\n        slug: slugMap[category.id] || `category-${category.id}`,\n        name: category.category_name || `Category ${category.id}`,\n        sort_order: category.id\n      };\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: formattedCategories,\n      total: formattedCategories.length,\n      language,\n      source: 'database'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Categories API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: '\u83B7\u53D6\u5206\u7C7B\u6570\u636E\u5931\u8D25',\n      details: error instanceof Error ? error.message : '\u672A\u77E5\u9519\u8BEF'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// \u5904\u7406\u98DF\u6750API\nasync function handleIngredients(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const language = searchParams.get('lang') || 'en';\n    const category = searchParams.get('category');\n    const limit = parseInt(searchParams.get('limit') || '100');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    let sql = `\n      SELECT \n        i.id,\n        i.slug,\n        i.category_id,\n        i18n.name as ingredient_name,\n        c18n.name as category_name\n      FROM ingredients i\n      LEFT JOIN ingredients_i18n i18n ON i.id = i18n.ingredient_id AND i18n.language_code = ?\n      LEFT JOIN ingredient_categories_i18n c18n ON i.category_id = c18n.category_id AND c18n.language_code = ?\n    `;\n    \n    const params: any[] = [language, language];\n    \n    if (category) {\n      const categoryId = parseInt(category);\n      if (!isNaN(categoryId)) {\n        sql += ' WHERE i.category_id = ?';\n        params.push(categoryId);\n      }\n    }\n    \n    sql += ' ORDER BY i.id ASC LIMIT ? OFFSET ?';\n    params.push(limit, offset);\n\n    const { results } = await db.prepare(sql).bind(...params).all();\n    const ingredients = results || [];\n\n    const formattedIngredients = ingredients.map((ingredient: any) => {\n      // \u6839\u636E\u5206\u7C7BID\u6620\u5C04\u5230\u6B63\u786E\u7684slug\n      const slugMap: Record<number, string> = {\n        1: 'meat',\n        2: 'seafood', \n        3: 'vegetables',\n        4: 'fruits',\n        5: 'dairy-eggs',\n        6: 'grains-bread',\n        7: 'nuts-seeds',\n        8: 'herbs-spices',\n        9: 'oils-condiments'\n      };\n      \n      return {\n        id: ingredient.id,\n        slug: ingredient.slug || `ingredient-${ingredient.id}`,\n        name: ingredient.ingredient_name || `Ingredient ${ingredient.id}`,\n        englishName: ingredient.ingredient_name || `Ingredient ${ingredient.id}`,\n        category: {\n          id: ingredient.category_id || 1,\n          slug: slugMap[ingredient.category_id] || 'other',\n          name: ingredient.category_name || 'Other'\n        }\n      };\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      results: formattedIngredients,\n      total: formattedIngredients.length,\n      limit,\n      offset,\n      language,\n      source: 'database'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Ingredients API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: '\u83B7\u53D6\u98DF\u6750\u6570\u636E\u5931\u8D25',\n      details: error instanceof Error ? error.message : '\u672A\u77E5\u9519\u8BEF'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// \u5904\u7406\u83DC\u7CFBAPI\nasync function handleCuisines(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const language = searchParams.get('lang') || 'en';\n\n    const { results } = await db.prepare(`\n      SELECT \n        c.id,\n        c.name,\n        COALESCE(c18n.name, c.name) as localized_name,\n        COALESCE(c18n.description, c.description) as localized_description,\n        c.created_at,\n        c.updated_at\n      FROM cuisines c\n      LEFT JOIN cuisines_i18n c18n ON c.id = c18n.cuisine_id AND c18n.language_code = ?\n      ORDER BY c.name ASC\n    `).bind(language).all();\n\n    const cuisines = results || [];\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: cuisines,\n      total: cuisines.length,\n      language: language,\n      source: 'database'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Cuisines API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: '\u83B7\u53D6\u83DC\u7CFB\u6570\u636E\u5931\u8D25',\n      details: error instanceof Error ? error.message : '\u672A\u77E5\u9519\u8BEF'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// \u83B7\u53D6\u7CFB\u7EDF\u914D\u7F6E\u7684\u8F85\u52A9\u51FD\u6570\nasync function getSystemConfig(db: D1Database, key: string, defaultValue: string | number | boolean): Promise<any> {\n  try {\n    const result = await db.prepare(`\n      SELECT value FROM system_configs WHERE key = ?\n    `).bind(key).first();\n    \n    if (!result || !result.value) {\n      return defaultValue;\n    }\n    \n    const value = String(result.value);\n    \n    // \u6839\u636E\u9ED8\u8BA4\u503C\u7C7B\u578B\u8F6C\u6362\u8FD4\u56DE\u503C\n    if (typeof defaultValue === 'number') {\n      const numValue = parseInt(value, 10);\n      return isNaN(numValue) ? defaultValue : numValue;\n    } else if (typeof defaultValue === 'boolean') {\n      return value.toLowerCase() === 'true';\n    }\n    \n    return value;\n  } catch (error) {\n    console.error(`Error getting system config ${key}:`, error);\n    return defaultValue;\n  }\n}\n\n// \u5904\u7406\u7528\u6237\u79EF\u5206API\nasync function handleUserUsage(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const isAdmin = searchParams.get('isAdmin') === 'true';\n\n    if (request.method === 'GET') {\n      if (!userId) {\n        return new Response(JSON.stringify({ error: 'User ID is required' }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // \u83B7\u53D6\u7528\u6237\u79EF\u5206\n      const userCredits = await db.prepare(`\n        SELECT * FROM user_credits WHERE user_id = ?\n      `).bind(userId).first();\n\n      if (!userCredits) {\n        // \u4ECE\u7CFB\u7EDF\u914D\u7F6E\u4E2D\u83B7\u53D6\u521D\u59CB\u79EF\u5206\n        const initialCredits = await getSystemConfig(db, 'initial_credits', 100);\n        \n        // \u521B\u5EFA\u65B0\u7528\u6237\u79EF\u5206\u8BB0\u5F55\n        const newCredits = await db.prepare(`\n          INSERT INTO user_credits (user_id, credits, total_earned, total_spent, created_at, updated_at)\n          VALUES (?, ?, ?, 0, DATETIME('now'), DATETIME('now'))\n          RETURNING *\n        `).bind(userId, initialCredits, initialCredits).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          data: {\n            credits: newCredits,\n            canGenerate: true,\n            availableCredits: initialCredits,\n          },\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // \u68C0\u67E5\u662F\u5426\u53EF\u4EE5\u751F\u6210\n      const adminUnlimited = await getSystemConfig(db, 'admin_unlimited', true);\n      const canGenerate = (isAdmin && adminUnlimited) || (userCredits.credits as number) > 0;\n\n      return new Response(JSON.stringify({\n        success: true,\n        data: {\n          credits: userCredits,\n          canGenerate,\n          availableCredits: userCredits.credits,\n        },\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n\n    } else if (request.method === 'POST') {\n      const body = await request.json();\n      const { userId, action, amount, description } = body;\n\n      if (!userId) {\n        return new Response(JSON.stringify({ error: 'User ID is required' }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      if (action === 'spend') {\n        // \u4ECE\u7CFB\u7EDF\u914D\u7F6E\u4E2D\u83B7\u53D6\u751F\u6210\u6D88\u8017\n        const generationCost = amount || await getSystemConfig(db, 'generation_cost', 1);\n        \n        // \u6D88\u8D39\u79EF\u5206\n        const userCredits = await db.prepare(`\n          SELECT * FROM user_credits WHERE user_id = ?\n        `).bind(userId).first();\n\n        if (!userCredits || userCredits.credits < generationCost) {\n          return new Response(JSON.stringify({ \n            success: false, \n            message: 'Insufficient credits.' \n          }), {\n            status: 400,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        const updatedCredits = await db.prepare(`\n          UPDATE user_credits \n          SET credits = credits - ?, total_spent = total_spent + ?, updated_at = DATETIME('now')\n          WHERE user_id = ?\n          RETURNING *\n        `).bind(generationCost, generationCost, userId).first();\n\n        // \u8BB0\u5F55\u4EA4\u6613\n        const transaction = await db.prepare(`\n          INSERT INTO credit_transactions (user_id, type, amount, reason, description)\n          VALUES (?, 'spend', ?, 'generation', ?)\n          RETURNING *\n        `).bind(userId, generationCost, description || `Generated a recipe for ${generationCost} credits.`).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          message: `Successfully spent ${generationCost} credits.`,\n          data: { credits: updatedCredits, transactionId: transaction.id }\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      return new Response(JSON.stringify({ error: 'Invalid action' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n      status: 405,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('User usage API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to process user usage request',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// \u5904\u7406\u83DC\u8C31API\nasync function handleRecipes(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const search = searchParams.get('search');\n    const cuisineId = searchParams.get('cuisineId');\n    const language = searchParams.get('lang') || 'en';\n\n    // \u68C0\u67E5\u662F\u5426\u5B58\u5728 recipes_i18n \u8868\n    let hasI18nTable = false;\n    try {\n      const tableCheck = await db.prepare(`\n        SELECT name FROM sqlite_master WHERE type='table' AND name='recipes_i18n'\n      `).first();\n      hasI18nTable = !!tableCheck;\n    } catch (e) {\n      hasI18nTable = false;\n    }\n\n    let sql = `\n      SELECT \n        r.*,\n        c.name as cuisine_name,\n        COALESCE(c18n.name, c.name) as localized_cuisine_name\n    `;\n\n    // \u5982\u679C\u6709\u56FD\u9645\u5316\u8868\uFF0C\u6DFB\u52A0\u83DC\u8C31\u7684\u672C\u5730\u5316\u5B57\u6BB5\n    if (hasI18nTable) {\n      sql += `,\n        COALESCE(r18n.title, r.title) as localized_title,\n        COALESCE(r18n.description, r.description) as localized_description,\n        COALESCE(r18n.ingredients, r.ingredients) as localized_ingredients,\n        COALESCE(r18n.seasoning, r.seasoning) as localized_seasoning,\n        COALESCE(r18n.instructions, r.instructions) as localized_instructions,\n        COALESCE(r18n.chef_tips, r.chef_tips) as localized_chef_tips,\n        COALESCE(r18n.tags, r.tags) as localized_tags,\n        COALESCE(r18n.difficulty, r.difficulty) as localized_difficulty\n      `;\n    }\n\n    sql += `\n      FROM recipes r\n      LEFT JOIN cuisines c ON r.cuisine_id = c.id\n      LEFT JOIN cuisines_i18n c18n ON c.id = c18n.cuisine_id AND c18n.language_code = ?\n    `;\n\n    const params: any[] = [language];\n\n    // \u5982\u679C\u6709\u56FD\u9645\u5316\u8868\uFF0C\u6DFB\u52A0\u83DC\u8C31\u56FD\u9645\u5316\u5173\u8054\n    if (hasI18nTable) {\n      sql += ` LEFT JOIN recipes_i18n r18n ON r.id = r18n.recipe_id AND r18n.language_code = ?`;\n      params.push(language);\n    }\n\n    const conditions: string[] = [];\n\n    if (search) {\n      if (hasI18nTable) {\n        conditions.push('(COALESCE(r18n.title, r.title) LIKE ? OR COALESCE(r18n.description, r.description) LIKE ?)');\n      } else {\n        conditions.push('(r.title LIKE ? OR r.description LIKE ?)');\n      }\n      params.push(`%${search}%`, `%${search}%`);\n    }\n\n    if (cuisineId) {\n      conditions.push('r.cuisine_id = ?');\n      params.push(parseInt(cuisineId));\n    }\n\n    if (conditions.length > 0) {\n      sql += ' WHERE ' + conditions.join(' AND ');\n    }\n\n    sql += ' ORDER BY r.created_at DESC LIMIT ? OFFSET ?';\n    params.push(limit, offset);\n\n    const { results } = await db.prepare(sql).bind(...params).all();\n    const recipes = results || [];\n\n    // \u83B7\u53D6\u603B\u6570\n    let countSql = 'SELECT COUNT(*) as total FROM recipes r';\n    const countConditions: string[] = [];\n    const countParams: any[] = [];\n    \n    if (search) {\n      if (hasI18nTable) {\n        countSql += ` LEFT JOIN recipes_i18n r18n ON r.id = r18n.recipe_id AND r18n.language_code = ?`;\n        countConditions.push('(COALESCE(r18n.title, r.title) LIKE ? OR COALESCE(r18n.description, r.description) LIKE ?)');\n        countParams.push(language, `%${search}%`, `%${search}%`);\n      } else {\n        countConditions.push('(r.title LIKE ? OR r.description LIKE ?)');\n        countParams.push(`%${search}%`, `%${search}%`);\n      }\n    }\n\n    if (cuisineId) {\n      countConditions.push('r.cuisine_id = ?');\n      countParams.push(parseInt(cuisineId));\n    }\n\n    if (countConditions.length > 0) {\n      countSql += ' WHERE ' + countConditions.join(' AND ');\n    }\n    \n    const countResult = await db.prepare(countSql).bind(...countParams).first<{ total: number }>();\n    const total = countResult?.total || 0;\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: recipes,\n      total,\n      limit,\n      offset,\n      totalPages: Math.ceil(total / limit),\n      hasI18nTable\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Recipes API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: '\u83B7\u53D6\u83DC\u8C31\u6570\u636E\u5931\u8D25',\n      details: error instanceof Error ? error.message : '\u672A\u77E5\u9519\u8BEF'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n} \n\n// \u5904\u7406\u6DFB\u52A0\u6570\u636E\u5E93\u5217\nasync function handleAddColumns(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    if (request.method !== 'POST') {\n      return new Response('Method not allowed', {\n        status: 405,\n        headers: corsHeaders\n      });\n    }\n\n    // \u6DFB\u52A0\u7F3A\u5931\u7684\u5217\n    await db.prepare('ALTER TABLE recipes_i18n ADD COLUMN tags TEXT').run();\n    await db.prepare('ALTER TABLE recipes_i18n ADD COLUMN difficulty TEXT').run();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Columns added successfully'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Add columns error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to add columns',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// \u5904\u7406\u7CFB\u7EDF\u914D\u7F6EAPI\nasync function handleSystemConfigs(request: Request, db: D1Database, corsHeaders: Record<string, string>): Promise<Response> {\n  try {\n    if (request.method === 'GET') {\n      // \u83B7\u53D6\u6240\u6709\u7CFB\u7EDF\u914D\u7F6E\n      const { results } = await db.prepare(`\n        SELECT key, value, description, updated_at FROM system_configs\n        ORDER BY key ASC\n      `).all();\n\n      return new Response(JSON.stringify({\n        success: true,\n        data: results || []\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n\n    } else if (request.method === 'POST') {\n      // \u66F4\u65B0\u7CFB\u7EDF\u914D\u7F6E\n      const { key, value, description } = await request.json();\n\n      if (!key || value === undefined) {\n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u53C2\u6570\u9519\u8BEF: \u5FC5\u987B\u63D0\u4F9B key \u548C value'\n        }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // \u66F4\u65B0\u6216\u63D2\u5165\u914D\u7F6E\n      const result = await db.prepare(`\n        INSERT INTO system_configs (key, value, description, updated_at)\n        VALUES (?, ?, ?, DATETIME('now'))\n        ON CONFLICT(key) DO UPDATE SET\n          value = excluded.value,\n          description = COALESCE(excluded.description, description),\n          updated_at = DATETIME('now')\n        RETURNING *\n      `).bind(key, String(value), description || '').first();\n\n      return new Response(JSON.stringify({\n        success: true,\n        data: result\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n\n    } else {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Method not allowed'\n      }), {\n        status: 405,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n  } catch (error) {\n    console.error('System configs error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to handle system configs',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n} ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/nasirann/Documents/GitHub/recipe-easy/src/worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/nasirann/Documents/GitHub/recipe-easy/src/worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/nasirann/Documents/GitHub/recipe-easy/.wrangler/tmp/bundle-GnjaUF/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/nasirann/Documents/GitHub/recipe-easy/.wrangler/tmp/bundle-GnjaUF/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/nasirann/Documents/GitHub/recipe-easy/.wrangler/tmp/bundle-GnjaUF/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["userId"]
}
